```{r echo=FALSE}
modules::import('./scripts/knit', attach = TRUE)
opts_chunk$set(fig.path = 'figure/codon-anticodon-<%= species %>-',
               cache.path = 'cache/codon-anticodon-<%= species %>-',
               dev = c('png', 'pdf'))

config = modules::import('./config_<%= species %>')
data = modules::import('./data')
```

## Load data

The aim of this analysis is to test whether the anticodon isoacceptor tRNA pool
is optimised to efficiently decode a condition specific set of codons, or
whether it is largely unchanging, and optimised to the overall codon usage.

```{r}
trna_counts = data$trna_counts(config)
mrna_counts = data$mrna_counts(config)
mrna_annotation = data$mrna_annotation(config)
```

## Codon usage and anticodon abundance

Calculate relative codon usage (RCU) and tRNA anticodon abundance. The RCU is
the proportion each codon contributes to the amino acid it codes for. To
calculate the RCU, we first calculate the codon usage (i.e. the count of each
codon) per gene. These counts are multiplied with the gene’s normalised
expression, and then summed over the transcriptome. Finally, each codon usage
is divided by the sum of the codon usage of its amino acid.

The first step is to retrieve the canonical coding sequence (CDS) of each gene.

```{r cds}
canonical_cds = data$canonical_cds(config)
```

Calculate codon usage.

```{r codon_usage}
mrna_sf = mrna_counts %>% select(starts_with('do')) %>% norm$size_factors()
mrna_counts_sf = norm$transform_counts(mrna_counts, . / mrna_sf$.,
                                       starts_with('do'))

cu = import('codon_usage')
mrna_counts_and_cds = inner_join(mrna_counts_sf, canonical_cds, by = 'Gene')
rcu = inner_join(cu$cu(canonical_cds), mrna_counts_and_cds, by = 'Gene')

rcu = lapply(mrna_design$DO, lib -> {
    rcu %>%
        mutate_(CU = bquote(CU * .(as.name(lib)) / Length)) %>%
        `class<-`(c('codon_usage$cu', class(.))) %>%
        cu$rcu() %>%
        select(Gene, Codon, RCU) %>%
        mutate(DO = lib)
}) %>%
    bind_rows()
```

Calculate the relative anticodon abundance (RAA), the tRNA equivalent of the
RCU, i.e. the proportional contribution of each anticodon isoacceptor to its
isotype.

```{r aab}
raa = trna_counts %>%
    melt(id.vars = c('Gene', 'AA', 'Anticodon'),
         variable.name = 'DO', value.name = 'Count') %>%
    mutate(Codon = cu$revcomp(Anticodon)) %>%
    group_by(DO, AA, Codon) %>%
    summarize(Count = sum(Count)) %>%
    mutate(RAA = Count / sum(Count)) %>%
    ungroup() %>%
    select(DO, Codon, RAA)
```

## Correlation of codon–anticodon adaptation

For each condition, calculate the adaptation of codons and anticodons as the
correlation between RCU and RAA between all genes.

```{r}
per_gene_adaptation = function (condition) {
    mrna_dos = filter(mrna_design, Celltype == condition)$DO
    trna_dos = filter(trna_design, Celltype == condition)$DO
    # Compute mean over replicate libraries
    mean_raa = raa %>%
        filter(DO %in% trna_dos) %>%
        group_by(Codon) %>%
        summarize(RAA = mean(RAA))
    mean_rcu_by_gene = rcu %>%
        filter(DO %in% mrna_dos) %>%
        group_by(Gene, Codon) %>%
        summarize(RCU = mean(RCU))

    mean_rcu_by_gene %>%
        group_by(Gene) %>%
        mutate(Adaptation = cu$adaptation(., mean_raa))
}

conditions = unique(unlist(config$contrasts))
adaptation = mclapply(conditions, per_gene_adaptation, mc.cores = detectCores())
names(adaptation) = conditions
```

Load GO gene sets. We use only GO terms with $> 39$ genes.

```{r}
go_genes = data$go_genes(config)
```

Perform GSEA on gene set ordered by adaptation.

```{r}
piano = modules::import_package('piano')

go_genes_gsa = piano$loadGSC(go_genes, 'data.frame')

perform_gsea = function (stats) {
    stats = na.omit(with(stats, setNames(Adaptation, Gene)))
    # Make correlation coefficients [-1, 1] p-value like by transforming them
    # into the domain (0, 1] — albeit we make 0 inclusive for simplicity.
    # They also need to be inverted since higher correlation implies better fit.
    stats = (1 - stats) * 0.5
    piano$runGSA(stats, gsc = go_genes_gsa)
}

gsea = mclapply(adaptation, perform_gsea, mc.cores = detectCores())
```

Prettify tables and save them.

```{r}
prettify_gsea_results = function (results)
    piano$GSAsummaryTable(results) %>%
    select(Name = 1, Genes = 2, Stat = 3, p = 4, padj = 5, Up = 6, Down = 7) %>%
    arrange(padj) %>%
    tbl_df()

pretty_gsea = lapply(gsea, prettify_gsea_results)

write_gsea = function (data, name)
    io$write_table(data, file = sprintf('results/gsea-%s-%s.tsv',
                                        config$species, name))

invisible(mapply(write_gsea, pretty_gsea, names(pretty_gsea)))
```

---

## Gene set correlation

Do gene-set-level analysis of adaptation. Compare these results with … PC1?

```{r}
go_rcu = inner_join(rcu, go_genes, by = 'Gene') %>%
    group_by(DO, GO, Codon) %>%
    summarize(RCU = mean(RCU, na.rm = TRUE)) %>%
    ungroup()

per_go_adaptation = function (condition) {
    mrna_dos = filter(mrna_design, Celltype == condition)$DO
    trna_dos = filter(trna_design, Celltype == condition)$DO
    # Compute mean over replicate libraries
    mean_raa = raa %>%
        filter(DO %in% trna_dos) %>%
        group_by(Codon) %>%
        summarize(RAA = mean(RAA))
    mean_rcu_by_go = go_rcu %>%
        filter(DO %in% mrna_dos) %>%
        group_by(GO, Codon) %>%
        summarize(RCU = mean(RCU))

    mean_rcu_by_go %>%
        group_by(Gene) %>%
        mutate(Adaptation = cu$adaptation(., mean_raa))
}

go_adaptation = mclapply(conditions, per_go_adaptation, mc.cores = detectCores())
names(go_adaptation) = conditions
```

Calculate the PCA

```{r}
go_cu = inner_join(cu$cu(canonical_cds), go_genes, by = 'Gene') %>%
    group_by(GO, Codon) %>%
    summarize(CU = mean(CU)) %>%
    mutate(CU = CU / sum(CU)) %>%
    ungroup()

go_cu_table = acast(go_cu, GO ~ Codon, value.var = 'CU')
go_cu_pc = prcomp(go_cu_table, scale. = TRUE)

#--------------------------
go_cu1 = inner_join(cu$cu(canonical_cds), go_genes, by = 'Gene') %>%
    group_by(Gene) %>%
    mutate(CU = CU / sum(CU)) %>%
    ungroup() %>%
    group_by(GO, Codon) %>%
    summarize(CU = mean(CU)) %>%
    ungroup()

go_cu_table1 = acast(go_cu1, GO ~ Codon, value.var = 'CU')
go_cu_pc1 = prcomp(go_cu_table1, scale. = TRUE)
```
