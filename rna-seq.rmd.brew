```{r echo=FALSE}
modules::import('./scripts/knit', attach = TRUE)
opts_chunk$set(fig.path = 'figure/rna-seq-<%= species %>-',
               dev = c('png', 'pdf'),
               cache = FALSE)

config = import('./config_<%= species %>')
```

Load the RNA-seq count data. We are using gene-level counts from
`htseq-count`.

```{r load-data}
data = import('data')
counts = data$mrna_counts(config)
design = data$mrna_design(config)
```

Throw out zero rows.

```{r remove-zeros}
zero_rows = rowSums(select(counts, -Gene, -Name)) == 0
table(zero_rows)
(counts = counts[! zero_rows, ])
```

Load annotation. We are only interested in protein-coding genes, and filter
mitochondrial genes, since these use a different genetic code. We also filter
out any additional unplaced scaffolds present in the annotation.

Finally, the annotation is merged with the count data for ease of use.

```{r load-annotation}
annotation = data$mrna_annotation(config)
(counts = inner_join(annotation, counts, by = 'Gene'))
```

We have `r nrow(counts)` properly annotated genes.

```{r raw-counts-boxplot}
gg_boxplot(select(counts, starts_with('do')), design, config$celltype_colors)
```

PCA of raw counts.

```{r raw-counts-pca}
pcplot_by_do = function (pcs) {
    v = summary(pcs)$importance[2, ] * 100
    pcs = pcs$x %>%
        as.data.frame() %>%
        add_rownames('DO') %>%
        inner_join(design, by = 'DO')
    ggplot(pcs, aes(x = PC1, y = PC2)) +
        geom_point(aes(color = Celltype), size = 3, show_guide = FALSE) +
        scale_x_continuous(sprintf('PC1 (%0.1f%% variance explained)', v[1])) +
        scale_y_continuous(sprintf('PC2 (%0.1f%% variance explained)', v[2])) +
        scale_color_manual(values = config$celltype_colors)
}

count_prcomp = function (data)
    prcomp(t(select(data, starts_with('do'))), scale. = TRUE)

pcplot_by_do(count_prcomp(counts))
```

Normalise data by library size using DESeq(2).

```{r sf-counts-boxplot}
sf_counts = data$mrna_sf_counts(config)
gg_boxplot(select(sf_counts, starts_with('do')), design, config$celltype_colors)
```

PCA of library size normalised counts.

```{r sf-counts-pca}
pcplot_by_do(count_prcomp(sf_counts))
```

Notice the much longer tail for the “liver” samples. This shouldn’t necessarily
exist, and there is no reason to believe that this is a biological rather than
technical signal. So we try quantile normalisation instead.

```{r q-counts-boxplot}
quantile_normalize = function (data) {
    ordered_indices = apply(data, 2, x -> rank(x, ties = 'min'))
    row_means = rowMeans(apply(data, 2, sort))
    apply(ordered_indices, 2, x -> row_means[x]) %>% as.data.frame()
}

q_counts = select(counts, starts_with('do'))
q_counts = cbind(select(counts, -starts_with('do')),
                 quantile_normalize(q_counts)) %>% tbl_df()

gg_boxplot(select(q_counts, starts_with('do')), design, config$celltype_colors)
```

Again, here’s the PCA of the quantile normalised data.

```{r q-counts-pca}
pcplot_by_do(count_prcomp(q_counts))
```

Next, we will calculate the actual codon usage. For this, we need to find the
canonical coding sequences of all genes.

```{r load-canonical-cds}
canonical_cds = data$canonical_cds(config)
```

First, we calculate the “raw” codon usage, i.e. unweighted by gene expression.
Afterwards, we multiply these values with the gene expression values for each
library.

We get a list of the libraries. Each list item is a codon frequency table with
one row per gene, the codon frequencies weighted by gene expression.

```{r codon-usage}
cu_ = import('codon_usage')
counts_and_cds = inner_join(sf_counts, canonical_cds, by = 'Gene')
raw_cu = inner_join(cu_$cu(canonical_cds), counts_and_cds, by = 'Gene')

cu = Map(DO ~ Celltype -> {
    raw_cu %>%
        mutate_(CU = bquote(CU * .(as.name(DO)) / nchar(Sequence))) %>%
        select(Gene, Codon, CU) %>%
        mutate(DO = DO, Celltype = Celltype)
}, design$DO, design$Celltype) %>%
    bind_rows()
```

Calculate the average codon usage over all genes for each library.  After that,
we plot the distribution of codon usage as  a box plot.

```{r codon-usage-boxplot}
mean_codon_hist = cu %>%
    group_by(Celltype, DO, Codon) %>%
    summarize(CU = mean(CU)) %>%
    ungroup()

ggplot(mean_codon_hist, aes(factor(DO), CU, color = Celltype)) +
    geom_box() + geom_outliers(size = 1) +
    xlab('Library') +
    scale_color_manual(values = config$celltype_colors) +
    theme_bw()
```

Perform PCA on the codon usage bias, i.e. the relative codon usage as a
fraction of its amino acid.

```{r codon-usage-pca}
tidyr = import_package('tidyr')
rel_cu = mean_codon_hist %>%
    inner_join(cu_$genetic_code, by = 'Codon') %>%
    group_by(Celltype, DO, AA) %>%
    mutate(CU = CU / sum(CU)) %>%
    ungroup() %>%
    select(DO, Codon, CU) %>%
    tidyr$spread(Codon, CU)

# Make data scalable by removing columns with 0 variance
pc_data = select(rel_cu, -DO) %>%
    as.data.frame() %>%
    `rownames<-`(rel_cu$DO)
unit_data = sapply(pc_data, x -> base$reduce(`==`, x[-1], x[1]))
pc_data = pc_data[, ! unit_data]
pcplot_by_do(prcomp(pc_data, scale. = TRUE))
```

Almost all of the total variance is explained by just one rotation. This
suggests that there is a systematic bias in the data. Let’s see whether certain
amino acids are systematically skewed.

```{r amino-acid-skew-boxplot, fig.width=12}
skew_data = pc_data %>% add_rownames('DO') %>%
    tidyr$gather(Codon, CU, -DO) %>%
    inner_join(cu_$genetic_code, by = 'Codon')

# Alternating colours for the amino acids.
pal = setNames(rep(c('#8080FF', '#AAAAAA'), times = 10),
               sort(unique(filter(cu_$genetic_code, AA != '*')$AA)))
ggplot(skew_data, aes(x = factor(Codon, levels = unique(Codon[order(AA)])), y = CU)) +
    geom_bar(aes(fill = AA, group = DO), stat = 'identity', position = 'dodge') +
    scale_fill_manual(values = pal)
```

Nothing. Let’s have a look at the hierarchical clustering of codons.

```{r codon-heatmap, fig.width=9}
library(gplots)
colside_type = design[match(rownames(pc_data), design$DO), ]$Celltype
heatmap.2(as.matrix(t(pc_data)), trace = 'none', density.info = 'none',
          ColSideColors = config$celltype_colors[colside_type],
          lmat = cbind(c(5, 0, 3), c(4, 1, 2), c(6, 6, 6)),
          lwid = c(1.5, 4, 2),
          lhei = c(1.5, 0.25, 4))
legend('right', bty = 'n', legend = names(config$celltype_colors),
       fill = config$celltype_colors)
```

The bias may be due to the fact that there is a strong skew in gene length in
highly expressed genes. We therefore look at the gene lengths of highly
expressed genes. We use the top 1000 genes in each condition for that.

```{r gene-lengths}
sorted_gene_lengths = inner_join(data$mrna_tpm_counts(config), canonical_cds, by = 'Gene') %>%
    mutate(Length = nchar(Sequence)) %>%
    select(Gene, Length, starts_with('do')) %>%
    tidyr$gather(DO, Count, -Gene, -Length) %>%
    inner_join(design, by = 'DO') %>%
    group_by(DO) %>%
    mutate(Rank = rank(Count, ties.method = 'min')) %>%
    arrange(desc(Count))

top_1000_gene_lengths = sorted_gene_lengths %>%
    slice(1 : 1000) %>%
    summarize(Length = sum(Length))

with(top_1000_gene_lengths, setNames(Length, DO))
```

Plot the gene length versus gene expression.

```{r gene-length-scatter, fig.width=12}
transparent = function (colors, alpha = 0.5) {
    c = col2rgb(colors)
    setNames(rgb(c['red', ], c['green', ], c['blue', ],
                 alpha * 255, maxColorValue = 255), names(colors))
}

ggplot(sorted_gene_lengths, aes(x = Rank, y = Length)) +
    geom_point(aes(color = Celltype), size = 1) +
    scale_y_log10('Transcript length') +
    scale_x_continuous('Rank of gene expression') +
    scale_color_manual(values = transparent(config$celltype_colors))
```
