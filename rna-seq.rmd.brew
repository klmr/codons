```{r echo=FALSE}
modules::import('./scripts/knit', attach = TRUE)
opts_chunk$set(fig.path = 'figure/rna-seq-',
               cache.path = 'cache/rna-seq-')
```

Load the RNA-seq count data. We are using gene-level counts from
<code>htseq-count</code>.

```{r}
counts = io$read_table('./data/rnaseq-counts-mm10.tsv', header = TRUE) %>%
    as_data_frame()
```

Throw out zero rows.

```{r}
zero_rows = rowSums(select(counts, -Gene)) == 0
table(zero_rows)
(counts = counts[! zero_rows, ])
```

Load the library design matrix.

```{r}
design = io$read_table('./data/libraries-rna-seq-mm10.tsv') %>%
    as_data_frame() %>%
    select(DO = 1, Celltype = 2)

design
```

Load annotation. We are only interested in protein-coding genes, and filter
mitochondrial genes, since these use a different genetic code. We also filter
out any additional unplaced scaffolds present in the annotation.

```{r}
annotation = io$read_table('./data/Mus_musculus.GRCm38.75.gene_annot.tsv',
                           header = TRUE) %>%
    as_data_frame() %>%
    filter(source == 'protein_coding') %>%
    mutate(Chr = sapply(strsplit(locus, ':'), base$item(1)),
           Start = as.integer(base$grep(':(\\d+)', locus)),
           End = as.integer(base$grep('\\.\\.(\\d+)', locus))) %>%
    filter(grepl('^(chr)?(\\d+|X|Y)$', Chr)) %>%
    select(Gene = ID, Name, Chr, Start, End, GO)

counts = inner_join(annotation, counts, by = 'Gene')
```

```{r}
celltype_colors = c(liver = 'chartreuse4',
                    `Hepa1-6` = 'dodgerblue3',
                    Hepa1c1c7 = 'deepskyblue3')
gg_boxplot(select(counts, starts_with('do')), design, celltype_colors)

```

Plot PCA of raw counts.

```{r fig.width=10, fig.height=4}
pcplot_by_do = function (pcs) {
    v = summary(pcs)$importance[2, ] * 100
    pcs = pcs$x %>%
        as.data.frame() %>%
        add_rownames('DO') %>%
        inner_join(design, by = 'DO')
    ggplot(pcs, aes(x = PC1, y = PC2)) +
        geom_point(aes(color = Celltype), size = 3) +
        scale_x_continuous(sprintf('PC1 (%0.1f%% variance explained)', v[1])) +
        scale_y_continuous(sprintf('PC2 (%0.1f%% variance explained)', v[2])) +
        scale_color_manual(values = celltype_colors)
}

count_prcomp = function (data)
    prcomp(t(select(data, starts_with('do'))), scale. = TRUE)

pcplot_by_do(count_prcomp(counts))
```

Normalise data by library size.

```{r}
library(DESeq2)

size_factors = estimateSizeFactorsForMatrix(counts %>% select(starts_with('do'))) %>%
    t() %>% as.data.frame()

sf_counts = counts %>% mutate_each(funs(. / size_factors$.), starts_with('do'))
gg_boxplot(select(sf_counts, starts_with('do')), design, celltype_colors)
```

```{r fig.width=10, fig.height=4}
pcplot_by_do(count_prcomp(sf_counts))
```

Notice the numerous remaining outliers for the “liver” samples. These shouldn’t
exist, and there is no reason to believe that this is a biological rather than
technical signal. So we use quantile normalisation instead.

```{r}
quantile_normalize = function (data) {
    ordered_indices = apply(data, 2, x -> rank(x, ties = 'min'))
    row_means = rowMeans(apply(data, 2, sort))
    apply(ordered_indices, 2, x -> row_means[x]) %>% as.data.frame()
}

q_counts = select(counts, starts_with('do'))
q_counts = cbind(select(counts, -starts_with('do')),
                 quantile_normalize(q_counts)) %>% tbl_df()

gg_boxplot(select(q_counts, starts_with('do')), design, celltype_colors)
```

```{r fig.width=10, fig.height=4}
pcplot_by_do(count_prcomp(q_counts))
```

Find the canonical coding sequences of all genes.

```{r}
library(Biostrings)
ccds = readDNAStringSet('./data/Mus_musculus.GRCm38.cds.all.fa.gz')
names(ccds) = sub('.*gene:(ENSMUSG\\d+).*', '\\1', names(ccds))

ccds = data.frame(Gene = names(ccds), Sequence = ccds)

# Filter CCDS, only preserve valid coding frames

is_valid_cds = function (seq)
    nchar(seq) %% 3 == 0 & grepl('^ATG', seq) & grepl('(TAG|TAA|TGA)$', seq)

ccds = ccds %>% filter(is_valid_cds(Sequence))

longest = function (data)
    data[which.max(sapply(data, nchar))]

canonical_cds = ccds %>%
    group_by(Gene) %>%
    summarize(Sequence = longest(Sequence))
```

For each gene in each library, calculate the codon usage.

```{r}
raw_codon_hist = base$let(cds = DNAStringSet(canonical_cds$Sequence),
                          as.data.frame(trinucleotideFrequency(cds, 3)))

raw_codon_hist = cbind(Gene = canonical_cds$Gene, raw_codon_hist)

# FIXME use FPKM instead of quantile normalised counts.
codon_hist = mclapply(design$DO, lib -> {
    code = names(GENETIC_CODE)
    data = q_counts %>% select_('Gene', lib) %>%
        inner_join(raw_codon_hist, by = 'Gene')
    cbind(Gene = data$Gene, data %>% do({select(., one_of(code)) * .[[lib]]}))
}, mc.cores = detectCores()) %>% setNames(design$DO)
```

Calculate the average codon usage over all genes for each library.

```{r}
mean_codon_hist = do.call(rbind,
                          lapply(codon_hist,
                                 lib -> select(lib, -Gene) %>% colMeans))

plot_data = melt(mean_codon_hist, id.vars = NULL) %>%
    `colnames<-`(c('DO', 'Codon', 'Count')) %>%
    inner_join(design, by = 'DO')

ggplot(plot_data, aes(factor(DO), Count, color = Celltype)) +
    geom_box() + geom_outliers(size = 1) +
    xlab('Library') +
    scale_color_manual(values = celltype_colors) +
    theme_bw()
```

Perform PCA on the codon usage bias.


```{r fig.width=10, fig.height=4}
genetic_code = io$read_table('./data/genetic_code.tsv', header = FALSE,
                             col.names = c('Codon', 'AA')) %>%
    filter(! Codon %in% c('TAA', 'TGA', 'TAG'))

cub = melt(mean_codon_hist, id.vars = NULL) %>%
    `colnames<-`(c('DO', 'Codon', 'Count')) %>%
    inner_join(genetic_code, by = 'Codon') %>%
    group_by(DO, AA) %>%
    mutate(CUB = Count / sum(Count)) %>%
    select(DO, Codon, CUB) %>%
    dcast(DO ~ Codon, value.var = 'CUB') %>%
    tbl_df()

# Make data scalable by removing columns with 0 variance
pc_data = select(cub, -DO) %>%
    as.data.frame() %>%
    `rownames<-`(cub$DO)
unit_data = sapply(pc_data, x -> base$reduce(`==`, x[-1], x[1]))
pc_data = pc_data[, ! unit_data]
pcplot_by_do(prcomp(pc_data, scale. = TRUE))
```

Almost all of the total variance is explained by just one rotation. This
suggests that there is a systematic bias in the data. Let’s see whether certain
amino acids are systematically skewed.

```{r fig.width=12}
skew_data = pc_data %>% add_rownames('DO') %>%
    melt(, variable.name = 'Codon', value.name = 'CUB') %>%
    inner_join(genetic_code, by = 'Codon')

# Alternating colours for the amino acids.
pal = setNames(rep(c('#8080FF', '#AAAAAA'), times = 10), sort(unique(genetic_code$AA)))
ggplot(skew_data, aes(x = factor(Codon, levels = unique(Codon[order(AA)])), y = CUB)) +
    geom_bar(aes(fill = AA, group = DO), stat = 'identity', position = 'dodge') +
    scale_fill_manual(values = pal)
```

Let’s have a look at the clustering of codons.

```{r fig.width=9}
library(gplots)
colside_type = design[match(rownames(pc_data), design$DO), ]$Celltype
heatmap.2(as.matrix(t(pc_data)), trace = 'none', density.info = 'none',
          ColSideColors = celltype_colors[colside_type],
          lmat = cbind(c(5, 0, 3), c(4, 1, 2), c(6, 6, 6)),
          lwid = c(1.5, 4, 2),
          lhei = c(1.5, 0.25, 4))
legend('right', bty = 'n', legend = names(celltype_colors),
       fill = celltype_colors)
```
