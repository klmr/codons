```{r echo=FALSE}
modules::import('./scripts/knit', attach = TRUE)
opts_chunk$set(fig.path = 'figure/trna-<%= species %>-',
               cache = FALSE,
               dev = c('png', 'pdf'))

config = modules::import('config_<%= species %>')
```

# `r config$species` tRNA count data

Load the tRNA count data.

```{r}
data = import('./data')
counts = data$trna_counts(config)
(design = data$trna_design(config))
```

```{r}
sf_counts = data$trna_sf_counts(config)
```

Cluster the samples.

```{r heatman, fig.width=9}
library(gplots)
cor = cor(select(sf_counts, starts_with('do')), method = 'spearman')
divergent_colors = colorRampPalette(c('#603D71', 'white', '#A4B962'))(30)
colside_type = design[match(colnames(cor), design$DO), ]$Celltype
heatmap.2(cor, trace = 'none', density.info = 'none', col = divergent_colors,
          ColSideColors = config$celltype_colors[colside_type],
          lmat = cbind(c(5, 0, 3), c(4, 1, 2), c(6, 6, 6)),
          lwid = c(1.5, 4, 2),
          lhei = c(1.5, 0.25, 4))
legend('right', bty = 'n', legend = names(config$celltype_colors),
       fill = config$celltype_colors)
```

Perform principal components analysis.

```{r pca}
pcplot_by_do = function (pcs) {
    v = summary(pcs)$importance[2, ] * 100
    pcs = pcs$x %>%
        as.data.frame() %>%
        add_rownames('DO') %>%
        inner_join(design, by = 'DO')
    ggplot(pcs, aes(x = PC1, y = PC2)) +
        geom_point(aes(color = Celltype), size = 3, show_guide = FALSE) +
        scale_x_continuous(sprintf('PC1 (%0.1f%% variance explained)', v[1])) +
        scale_y_continuous(sprintf('PC2 (%0.1f%% variance explained)', v[2])) +
        scale_color_manual(values = config$celltype_colors)
}

count_prcomp = function (data)
    prcomp(t(select(data, starts_with('do'))), scale. = TRUE)
```

```{r raw-counts-pca}
pcplot_by_do(count_prcomp(counts))
```

```{r sf-counts-pca}
pcplot_by_do(count_prcomp(sf_counts))
```

Perform differential expression analysis between both cancer samples and the
healthy tissue.

```{r de}
deseq = import_package('DESeq2')
de = sapply(config$contrasts, contrast -> {
    col_data = design %>%
        filter(Celltype %in% contrast) %>%
        as.data.frame() %>% # tbl_df doesn’t allow rownames
        `rownames<-`(.$DO)
    count_data = counts %>%
        select(Gene, one_of(col_data$DO)) %>%
        as.data.frame()
    rownames(count_data) = count_data$Gene
    count_data = count_data[, -1]
    cds = deseq$DESeqDataSetFromMatrix(count_data, col_data, ~Celltype)
    cds$Condition = relevel(cds$Celltype, contrast[1])
    cds = deseq$DESeq(cds, quiet = TRUE)
    results = deseq$results(cds)

    title = paste(config$species, contrast, collapse = '–')
    deseq$plotMA(cds, main = title, alpha = 0.01)
    deseq$plotDispEsts(cds, main = title)

    results %>% as.data.frame() %>%
        add_rownames('Gene') %>%
        tbl_df() %>%
        arrange(pvalue)
}, simplify = FALSE)
```

Group genes into anticodon isoacceptor families.

```{r}
isoacceptors = sf_counts %>%
    group_by(Anticodon) %>%
    summarise_each(funs(mean), starts_with('do'))
```

Attempt differential expression analysis between anticodons. This requires us to
use different counts, though: we use the sum of unnormalised counts:

```{r iso-de}
iso_de_counts = counts %>%
    group_by(Anticodon) %>%
    summarise_each(funs(sum), starts_with('do'))

iso_de = sapply(config$contrasts, contrast -> {
    col_data = design %>%
        filter(Celltype %in% contrast) %>%
        as.data.frame() %>% # tbl_df doesn’t allow rownames
        `rownames<-`(.$DO)
    count_data = iso_de_counts %>%
        select(Anticodon, one_of(col_data$DO)) %>%
        as.data.frame()
    rownames(count_data) = count_data$Anticodon
    count_data = count_data[, -1]
    cds = deseq$DESeqDataSetFromMatrix(count_data, col_data, ~Celltype)
    cds$Condition = relevel(cds$Celltype, contrast[1])
    cds = deseq$DESeq(cds, quiet = TRUE)
    results = deseq$results(cds)

    title = paste(config$species, contrast, collapse = '–')
    deseq$plotMA(cds, main = title)
    deseq$plotDispEsts(cds, main = title)

    results %>% as.data.frame() %>%
        add_rownames('Anticodon') %>%
        tbl_df() %>%
        arrange(pvalue)
}, simplify = FALSE)

threshold = 0.01

iso_sig = lapply(iso_de, result -> result %>%
    filter(! is.na(pvalue) & pvalue < threshold) %>%
        arrange(desc(pvalue)))
```

* Contrast `r config$contrasts[[1]]`: `r nrow(iso_sig[[1]])` significant
results
* Contrast `r config$contrasts[[2]]`: `r nrow(iso_sig[[2]])` significant
results
* Contrast `r config$contrasts[[3]]`: `r nrow(iso_sig[[3]])` significant result
