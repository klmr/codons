#!/usr/bin/env Rscript

library(modules, warn.conflicts = FALSE, quietly = TRUE)
sys = import('sys')

sys$run({
    args = sys$cmdline$parse(arg('species', 'the species'),
                             arg('type', 'the type (“mrna” or “trna”)',
                                 validate = function (x) x %in% c('mrna', 'trna')))

    data = import('../data')
    config = import(paste('../config', args$species, sep = '_'))

    load_data = function (type)
        data[[paste(args$type, type, sep = '_')]](config)

    per_library_counts = load_data('tpm_counts')
    design = load_data('design')

    import_package('dplyr', attach = TRUE)
    import_package('tidyr', attach = TRUE)
    import('ebits/base/lambda') # for ->

    group_by_all_except = function (.data, ...) {
        except_names = vapply(lazyeval::lazy_dots(...),
                              x -> as.character(x$expr),
                              character(1))
        group_by_names = setdiff(colnames(.data), except_names)
        group_by_(.data, .dots = group_by_names)
    }

    per_condition_counts = per_library_counts %>%
        gather(DO, Count, starts_with('DO')) %>%
        inner_join(design, by = 'DO') %>%
        group_by_all_except(DO, Count) %>%
        summarize(Count = mean(Count)) %>%
        spread(Celltype, Count)

    io = import('ebits/io')
    io$write_table(per_condition_counts, stdout(), sep = '\t')
})

# vim: ft=r
