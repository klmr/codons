#!/usr/bin/env Rscript

library(modules, warn.conflicts = FALSE, quietly = TRUE)
sys = import('sys')

sys$run({
    valid_te_methods = c('simple-te', 'wobble-te', 'tai')
    valid_axes = c('which', 'match')
    validate = function (against) function (x) x %in% against
    args = sys$cmdline$parse(opt('', 'axis',
                                 do.call(sprintf,
                                         c('which axis to perform comparison across (%s or %s)',
                                           lapply(valid_axes, dQuote))),
                                 validate = validate(valid_axes)),
                             opt('t', 'te',
                                 do.call(sprintf,
                                         c('the method to calculate translation efficiency (%s, %s or %s)',
                                           lapply(valid_te_methods, dQuote))),
                                 valid_te_methods[1],
                                 validate(valid_te_methods)),
                             opt('c', 'mean-center', 'center tRNA strata before plotting?', FALSE),
                             opt('i', 'ramp-up', 'use codons at start of transcript (“ramp up”) only', FALSE),
                             arg('species', 'the species'),
                             arg('outfile', 'the filename of the output table'))

    config = import(sprintf('../config_%s', args$species))
    te = readRDS(sprintf('results/%s%s-%s.rds',
                         if (args$ramp_up) 'init-' else '',
                         args$te, args$species))
    if (args$mean_center)
        te = import('./plot-te-boxplot')$mean_center(te)

    import_package('dplyr', attach = TRUE)
    io = import('ebits/io')
    import('ebits/base')

    contrasts = rbind(cbind('Matching', c('Mismatching', 'DE', 'GO',
                                          'Housekeeping', 'Ribosomal')),
                      cbind(c('Simulated DE', 'Simulated GO'),
                            c('DE', 'GO'))) %>%
        t() %>% as.data.frame(stringsAsFactors = FALSE)

    which_test = function (data)
        wilcox.test(filter(data, Mode == 'Match')$TE,
                    filter(data, Mode == 'Mismatch')$TE,
                    alternative = 'greater')$p.value

    match_test = function (data)
        wilcox.test(data$TE,
                    filter(te, Which == 'All', Mode == 'Match')$TE,
                    alternative = 'greater')$p.value

    results = switch(args$axis,
        which = te %>%
            group_by(Which) %>%
            do(p = which_test(.)) %>%
            ungroup() %>%
            mutate(p = unlist(p), q = p.adjust(p, method = 'bonferroni')),
        match = te %>%
            filter(Which != 'All', Mode == 'Match') %>%
            group_by(Which) %>%
            do(p = match_test(.)) %>%
            ungroup() %>%
            mutate(p = unlist(p), q = p.adjust(p, method = 'bonferroni'))
    )

    io$write_table(results, args$outfile)
})

# vim: ft=r
