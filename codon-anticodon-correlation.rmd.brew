```{r echo=FALSE}
modules::import('./scripts/knit', attach = TRUE)
opts_chunk$set(fig.path = 'figure/codon-anticodon-<%= species %>-',
               cache.path = 'cache/codon-anticodon-<%= species %>-')

config = modules::import('config_<%= species %>')
```

The aim of this analysis is to test whether the anticodon isoacceptor tRNA pool
is optimised to efficiently decode a condition specific set of codons, or
whether it is largely unchanging, and optimised to the overall codon usage.

First, we load the relevant data (gene expression counts, annotation and
experimental design).

```{r}
trna_counts = io$read_table(config$trna_counts, header = TRUE) %>%
    tbl_df() %>% rename(Gene = X)
mrna_counts = io$read_table(config$mrna_counts, header = TRUE) %>%
    tbl_df()

trna_annotation = io$read_table(config$trna_annotation, header = FALSE) %>%
    select(Chr = 1, Num = 2, AA = 5, Anticodon = 6) %>%
    filter(grepl('(chr)?\\d+', Chr)) %>%
    filter(! Anticodon %in% c('TTA', 'TCA', 'CTA')) %>%
    transmute(Gene = paste(Chr, Num, sep = '.'), AA, Anticodon) %>%
    tbl_df()

trna_counts = inner_join(trna_annotation, trna_counts, by = 'Gene')

mrna_annotation = io$read_table(config$mrna_annotation, header = TRUE) %>%
    tbl_df() %>%
    filter(source == 'protein_coding') %>%
    mutate(Chr = sapply(strsplit(locus, ':'), base$item(1)),
           Start = as.integer(base$grep(':(\\d+)', locus)),
           End = as.integer(base$grep('\\.\\.(\\d+)', locus))) %>%
    filter(grepl('^(chr)?(\\d+|X|Y)$', Chr)) %>%
    select(Gene = ID, Name, Chr, Start, End, GO)

mrna_counts = inner_join(mrna_annotation, mrna_counts, by = 'Gene')

trna_design = io$read_table(config$trna_design,
                            col.names = c('DO', 'AB', 'Condition')) %>%
    tbl_df()

trna_inputs = filter(trna_design, AB == 'Input')$DO
trna_design = filter(trna_design, ! DO %in% trna_inputs)
trna_counts = select(trna_counts, -one_of(trna_inputs))

mrna_design = io$read_table('./data/libraries-rna-seq-mm10.tsv') %>%
    tbl_df() %>%
    select(DO = 1, Celltype = 2) %>%
    mutate(Celltype = ifelse(Celltype == 'liver', 'Liver-Adult', Celltype))

trna_design
trna_counts
mrna_design
mrna_counts
```

Filter out never expressed genes. For protein-coding genes this is
straightforward, we retain all whose count is $>0$.

```{r}
zero_rows = rowSums(select(mrna_counts, starts_with('do'))) == 0
table(zero_rows)
(mrna_counts = mrna_counts[! zero_rows, ])
```

For tRNA genes, we need to be more sensitive to spurious counts, using an
adjusted lower bound. To make this at all comparable across libraries, we use
normalised counts.

```{r}
norm = modules::import('norm')

trna_sf = trna_counts %>% select(starts_with('do')) %>% norm$size_factors()

trna_counts_sf = norm$transform_counts(trna_counts, . / trna_sf$.,
                                       starts_with('do'))

filter_unexpressed = function (counts, design) {
    threshold = 10 # This works well.
    expressed = counts %>% tidyr::gather(DO, Count, starts_with('do')) %>%
        inner_join(design, by = 'DO') %>%
        group_by(Gene, Condition) %>%
        summarize(Expressed = all(Count > threshold)) %>%
        summarize(Expressed = any(Expressed)) %>%
        filter(Expressed) %>% .$Gene

    filter(counts, Gene %in% expressed)
}

trna_counts_sf = filter_unexpressed(trna_counts_sf, trna_design)
(trna_counts = filter(trna_counts, Gene %in% trna_counts_sf$Gene))
```

```{r}
library(Biostrings)

trna_counts_sf = trna_counts_sf %>%
    mutate(Codon = as.character(reverseComplement(DNAStringSet(Anticodon))))
```
