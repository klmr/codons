```{r echo=FALSE,message=FALSE}
modules::import('./scripts/knit', attach = TRUE)
opts_chunk$set(fig.path = 'figure/codon-anticodon-<%= species %>-',
               cache.path = 'cache/codon-anticodon-<%= species %>-',
               dev = c('png', 'pdf'))

config = import('./config_<%= species %>')
```

## Load data

The aim of this analysis is to test whether the anticodon isoacceptor tRNA pool
is optimised to efficiently decode a condition specific set of codons, or
whether it is largely unchanging, and optimised to the overall codon usage.

First, we load the relevant data (gene expression counts, annotation and
experimental design).

```{r}
data = import('./data')
(trna_sf_counts = data$trna_sf_counts(config))
(mrna_counts = data$mrna_counts(config))
(trna_design = data$trna_design(config))
(mrna_design = data$mrna_design(config))
canonical_cds = data$canonical_cds(config)
```

## Codon usage and anticodon abundance

Calculate relative codon usage (RCU) and tRNA anticodon abundance. The RCU is
the proportion each codon contributes to the amino acid it codes for. To
calculate the RCU, we first calculate the codon usage (i.e. the count of each
codon) per gene. These counts are multiplied with the gene’s normalised
expression, and then summed over the transcriptome. Finally, each codon usage
is divided by the sum of the codon usage of its amino acid.

Calculate codon usage.

```{r codon_usage}
norm = import('norm')
mrna_sf = mrna_counts %>% select(starts_with('do')) %>% norm$size_factors()
mrna_counts_sf = norm$transform_counts(mrna_counts, . / mrna_sf$.,
                                       starts_with('do'))

cu = import('codon_usage')
mrna_counts_and_cds = inner_join(mrna_counts_sf, canonical_cds, by = 'Gene')
codon_usage = inner_join(cu$cu(canonical_cds), mrna_counts_and_cds, by = 'Gene')

codon_usage = lapply(mrna_design$DO, lib -> {
    codon_usage %>%
        mutate_(CU = bquote(CU * .(as.name(lib)) / nchar(Sequence))) %>%
        select(Gene, Codon, CU) %>%
        mutate(DO = lib)
}) %>%
    bind_rows()

sample_rcu = codon_usage %>%
    group_by(DO, Codon) %>%
    summarize(CU = sum(CU, na.rm = TRUE)) %>%
    ungroup() %>%
    `class<-`(c('codon_usage$cu', class(.))) %>%
    cu$rcu(DO) %>%
    dcast(DO ~ Codon, value.var = 'RCU')
```

Verify correctness: for each amino acid in each sample, the RCUs must sum to 1.

```{r verify-rcu}
sample_rcu %>% melt(id.vars = 'DO', variable.name = 'Codon', value.name = 'Count') %>%
    inner_join(cu$genetic_code, by = 'Codon') %>%
    group_by(DO, AA) %>%
    summarize(Sum = sum(Count)) %>%
    ungroup() %T>% {
        {setNames(.$Sum, .$AA)} %>%
        print()
    } %>%
    summarize(Correct = all.equal(Sum, rep(1, length(Sum)))) %>%
    .$Correct
```

Helper function for comparing RCU and RAA

```{r revcomp}
bios = import_package('Biostrings')
revcomp = function (seq)
    as.character(bios$reverseComplement(bios$DNAStringSet(seq)))
```

Calculate the relative  anticodon abundance (RAA), the tRNA equivalent of the
RCU, i.e. the proportional contribution of each anticodon isoacceptor to its
isotype.

```{r raa}
aa = trna_sf_counts %>%
    tidyr::gather(DO, Count, starts_with('do')) %>%
    mutate(Codon = revcomp(Anticodon)) %>%
    group_by(DO, AA, Codon) %>%
    summarize(Count = sum(Count)) %>%
    ungroup() %>%
    inner_join(trna_design, by = 'DO')

raa = aa %>%
    group_by(DO, AA) %>%
    mutate(RAA = Count / sum(Count)) %>%
    ungroup()
```

## Correlation of usage and abundance

Correlate codon usage and anticodon abundance in samples of (a) matching, and
(b) mismatching conditions. Compare the range of these correlations between (a)
and (b) to test whether they are significantly different. This being the case
would reject the hypothesis of no adaptation of the tRNA abundance to the
transcriptome.

## Prepare data

```{r prepare_dfs}
# FIXME: This is redundant: We first calculate RCU, `dcast` it, store the result
# in `sample_rcu`, and then `melt` it here again. The `dcast` + `melt` must go.
rcu_long = sample_rcu %>%
    melt(id.vars = 'DO', variable.name = 'Codon', value.name = 'RCU') %>%
    inner_join(mrna_design, by = 'DO') %>%
    select(DO, Celltype, Codon, RCU) %>%
    tbl_df()
```

Define the contrasts we are looking at.

Since the tumour cell lines are relatively similar we explicitly exclude them
from the list of mismatching conditions.

```{r define_contrasts}
all_contrasts = expand.grid(Codon = unique(rcu_long$Celltype),
                            Anti = unique(raa$Celltype),
                            stringsAsFactors = FALSE)
matching_contrasts = filter(all_contrasts, Codon == Anti)
mismatching_contrasts = filter(all_contrasts, Codon != Anti)
mismatching_contrasts = filter(mismatching_contrasts,
                               Codon == 'Liver-Adult' | Anti == 'Liver-Adult')
```

### Simple correlation

As a sanity check, plot the codon–anticodon usage for all three conditions.

```{r}
plot_ca_correlation = function (condition) {
    # For each point, calculate mean and min/max.
    cu = rcu_long %>%
        filter(Celltype == condition) %>%
        group_by(Codon) %>%
        summarize(cu = mean(RCU), cu_min = min(RCU), cu_max = max(RCU))
    aa = raa %>%
        filter(Celltype == condition) %>%
        group_by(Codon) %>%
        summarize(aa = mean(RAA), aa_min = min(RAA), aa_max = max(RAA))

    data = inner_join(cu, aa, by = 'Codon')
    rsq = summary(lm(aa ~ cu, data))$r.squared
    ggplot(data, aes(x = aa, y = cu)) +
        geom_point() +
        geom_errorbar(aes(ymin = cu_min, ymax = cu_max)) +
        geom_errorbarh(aes(xmin = aa_min, xmax = aa_max)) +
        stat_smooth(method = lm) +
        annotate(geom = 'text', label = sprintf('italic(r)**2==%0.2f', rsq),
                 x = 0.3, y = 0.9, parse = TRUE) +
        scale_x_continuous(name = 'Relative anticodon isoacceptor abundance') +
        scale_y_continuous(name = 'Relative codon usage')
}

conditions = unique(mrna_design$Celltype)
base$map(plot_ca_correlation, conditions)
```

### Ignoring wobble base pairing

The simplest correlation we can calculate ignores wobble base pairing and
filters out all codons without corresponding anticodon.

#### Matching and mismatching codon–anticodon pools

```{r correlate}
correlate_contrast = function (contrast, f, rcu, raa) {
    codon_samples = filter(mrna_design, Celltype == contrast[[1]])$DO
    anti_samples = filter(trna_design, Celltype == contrast[[2]])$DO
    contrasts = expand.grid(Codon = codon_samples, Anti = anti_samples)

    parallel::mclapply(as.data.frame(t(contrasts)), contrast -> {
        codon_do = contrast[1]
        anti_do = contrast[2]
        contrast_data = inner_join(filter(rcu, DO == codon_do),
                                   filter(raa, DO == anti_do),
                                   by = 'Codon') %>% f()
    }, mc.cores = parallel::detectCores()) %>% unlist() %>% unname()
}

do_contrasts = function(contrasts, f, ...)
    unname(unlist(lapply(as.data.frame(t(contrasts)), f, ...)))

cf = x -> cor(x$RCU, x$RAA, method = 'spearman')
matching_correlations = do_contrasts(matching_contrasts, correlate_contrast, cf,
                                     rcu_long, raa)
mismatching_correlations = do_contrasts(mismatching_contrasts,
                                        correlate_contrast, cf,
                                        rcu_long, raa)

all_correlations = rbind(data.frame(Correlation = matching_correlations,
                                    Type = 'Matching'),
                         data.frame(Correlation = mismatching_correlations,
                                    Type = 'Mismatching'))

significance = wilcox.test(matching_correlations,
                           mismatching_correlations,
                           alternative = 'greater', conf.int = TRUE)

p = format.pval(significance$p.value)

ggplot(all_correlations, aes(factor(Type), Correlation)) +
    geom_boxplot() +
    geom_point(position = position_jitter(height = 0, width = 0.3),
               color = 'grey') +
    scale_x_discrete(name = bquote(paste('Sample types compared ',
                                         (p == .(p))))) +
    ggtitle('Codon–anticodon correlations between different conditions')
```

#### Codon–anticodon match in DE genes

Next, perform a similar analysis for differentially expressed genes only. First,
compute the sets of differentially expressed genes between healthy tissues and
cancer cell lines.

```{r de}
deseq = modules::import_package('DESeq2')
untidy = function (tidy_data, rownames = 1)
    `rownames<-`(as.data.frame(tidy_data[-rownames]), tidy_data[[rownames]])

deseq_test = function (data, col_data, contrast) {
    cols = col_data[[1]] %in% contrast
    col_data = col_data[cols, , drop = FALSE]
    data = data[, cols]
    design = eval(bquote(~ .(as.name(colnames(col_data)[1]))))
    dds = deseq$DESeqDataSetFromMatrix(data, col_data, design)
    deseq$DESeq(dds, quiet = TRUE)
}

dds_data = untidy(select(mrna_counts, Gene, starts_with('do')))
dds_col_data = untidy(mrna_design)
dds_col_data = dds_col_data[colnames(dds_data), , drop = FALSE]
# Ensure Liver-Adult is condition A in the contrast
dds_col_data$Celltype = factor(dds_col_data$Celltype)
dds_col_data$Celltype = relevel(dds_col_data$Celltype, 'Liver-Adult')
contrasts = config$contrasts[grep('Liver-Adult', config$contrasts)]
dds = lapply(contrasts, deseq_test, data = dds_data, col_data = dds_col_data)
threshold = 0.001
de_genes = lapply(dds, dds -> subset(as.data.frame(deseq$results(dds)),
                                     ! is.na(padj) & padj < threshold))
sapply(de_genes, nrow)
```

Save the differentially expressed genes in a table

```{r de-table, echo=FALSE}
write_de_result = contrast ~ dds -> {
    results = subset(as.data.frame(deseq$results(dds)), ! is.na(padj))
    io$write_table(results[order(results$padj), ],
                   file = sprintf('results/de-genes-%s.tsv', contrast),
                   row.names = TRUE)
}

mapply(write_de_result,
       base$map(x -> paste(tolower(x), collapse = '-'), contrasts),
       dds)
```

Secondly, re-calculate codon usage bias, but using only a subset of genes in
each condition. So instead of summing over all genes, we sum over the codon
usage of genes significantly upregulated in the respective condition, and we do
this separately for each contrast.

```{r de-rcu}
rcu_for_condition = function (sample_ids, gene_set)
    codon_usage %>%
    filter(DO %in% sample_ids, Gene %in% gene_set) %>%
    group_by(DO, Codon) %>%
    summarize(CU = sum(CU, na.rm = TRUE)) %>%
    ungroup() %>%
    `class<-`(c('codon_usage$cu', class(.))) %>%
    cu$rcu(DO) %>%
    select(DO, Codon, RCU)

top_n_de = 200

rcu_for_contrast = function (de_genes, contrast) {
    de_genes = add_rownames(de_genes, 'Gene')
    up = list(filter(de_genes, log2FoldChange < 0),
              filter(de_genes, log2FoldChange > 0)) %>%
        setNames(contrast)

    get_top_n = function (x) {
        inner_join(x, canonical_cds, by = 'Gene') %>%
            mutate(BaseMeanTpm = norm$tpm(baseMean, nchar(Sequence))) %>%
            filter(BaseMeanTpm > quantile(BaseMeanTpm)[4]) %>%
            arrange(desc(abs(log2FoldChange))) %>%
            head(top_n_de) %>%
            .$Gene
    }

    up = base$map(get_top_n, up)

    # Save gene lists. Filename: A-vs-B.tsv: upregulated in B
    save_list = function (data, from, to) {
        filename = sprintf('results/de-up-genes-%s-%s-vs-%s.tsv',
                           config$species, from, to)
        io$write_table(data, filename, col.names = FALSE)
    }
    save_list(up[[1]], contrast[2], contrast[1])
    save_list(up[[2]], contrast[1], contrast[2])

    sample_ids = sapply(contrast, x -> filter(mrna_design, Celltype == x)$DO,
                        simplify = FALSE)

    base$map(rcu_for_condition, sample_ids, up) %>% rbind_all()
}

de_rcu = base$map(rcu_for_contrast, de_genes, contrasts)
```

Finally, calculate the correlation between every sample’s DE gene RCU and the
sample’s matched anticodon abundance. The hypothesis of Gingold & al. would be
that these are significantly higher than mismatching codon–anticodon pool
correlations.

```{r de_codon_correlation}
de_contrasts = lapply(contrasts, c -> data.frame(Codon = c, Anti = c))

de_correlations = base$map(
    contrast ~ rcu -> do_contrasts(contrast, correlate_contrast, cf,
                                   rcu, raa), de_contrasts, de_rcu) %>%
    unlist()

all_correlations = rbind(all_correlations,
                         data.frame(Correlation = de_correlations, Type = 'DE'))
all_correlations$Type = factor(all_correlations$Type,
                               c('Matching', 'Mismatching', 'DE'))

de_significance = wilcox.test(matching_correlations,
                              de_correlations, conf.int = TRUE,
                              alternative = 'less')

de_p = format.pval(de_significance$p.value)

ggplot(all_correlations, aes(Type, Correlation)) +
    geom_boxplot() +
    geom_point(position = position_jitter(height = 0, width = 0.3),
               color = 'grey') +
    scale_x_discrete(name = 'Sample types compared') +
    ggtitle('Codon–anticodon correlations between different conditions')
```

Testing for significant difference between the distribution of matching codon
supply and demand, and between the codon supply and demand just for DE genes
yields $p(\text{observation | DE = Matching}) = `r de_p`$.

#### Codon–anticodon match in genes of specific GO terms

We will also have a look at cell condition specific GO terms, as highlighted by
Gingold & al. First, load the GO term associations.

```{r go-association}
run_go_analysis = function (go_enriched, n = 2) {
    cancer_sample_names = c('Hepa1-6', 'Hepa1c1c7', 'HepG2', 'Huh7')
    dev_sample_names = 'E15.5'

    cancer_mrna_samples = filter(mrna_design, Celltype %in% cancer_sample_names)$DO
    cancer_go_terms = go_enriched %>%
        filter(grepl('Liver-Adult-vs-', Condition) &
               ! grepl('E15.5', Condition)) %>%
        top_n(n)

    go_cancer_rcu = sapply(samples…,
                           rcu_for_condition(cancer_mrna_samples, cancer_go_terms))
}
```

```{r simple-go-association, fig.width=5}
go_ids = c(GO0000087 = 'M phase of mitotic cell cycle',
           GO0007389 = 'Pattern specification process')

go_terms = sapply(names(go_ids),
                  function (id) readLines(sprintf('data/%s-%s.txt', id, config$species)))

cancer_mrna_samples = filter(mrna_design, Celltype != 'Liver-Adult')$DO
go_cancer_rcu = rcu_for_condition(cancer_mrna_samples, go_terms$GO0000087)

healthy_mrna_samples = filter(mrna_design, Celltype == 'Liver-Adult')$DO
go_healthy_rcu = rcu_for_condition(healthy_mrna_samples, go_terms$GO0007389)

go_rcu = rbind(go_cancer_rcu, go_healthy_rcu)
go_correlations = do_contrasts(matching_contrasts, correlate_contrast, cf,
                               go_rcu, raa)

all_correlations = rbind(all_correlations,
                         data.frame(Correlation = go_correlations, Type = 'GO'))

go_significance = wilcox.test(matching_correlations,
                              go_correlations, conf.int = TRUE,
                              alternative = 'less')
go_inverse_test = wilcox.test(matching_correlations,
                              go_correlations, conf.int = TRUE,
                              alternative = 'greater')

go_p = format.pval(go_significance$p.value)

ggplot(all_correlations, aes(Type, Correlation)) +
    geom_boxplot() +
    geom_point(position = position_jitter(height = 0, width = 0.3),
               color = 'grey') +
    scale_x_discrete(name = '') +
    scale_y_continuous(limits = c(0.75, 0.88))
```

Testing for significant difference between the distribution of matching codon
supply and demand, and between the codon supply and demand just for gene sets
from condition-specific GO terms yields $p(\text{observation | GO = Matching})
= `r go_p`$, where $H_1$: “specific GO term gene set RCU correlates *better*
with matching RAA than whole-transcriptome codon usage”. For the inverted
hypothesis (*worse* match), we find $p = `r format.pval(go_inverse_test$p.value)`$.<!-- ` -->

## Enriched GO terms


## Account for sample size

The gene sets used in the four comparisons have different size, which implies
different magnitude of sampling bias. This in turn influences adaptation. To
account for this, perform simulations for each of the different sizes used. This
allows us to assess whether a given gene set’s adaptation is explained by its
gene set size.

“Matching” and “mismatching” reflect the whole transcriptome and have the same
gene set size. “DE” uses sets of size `r top_n_de`. The GO term sets have sizes
`r paste(sapply(go_terms, length), collapse = ' and ')`, of which we’ll take the
mean to simulate gene sets.

For efficiency’s sake, we’re working with gene indices rather than genes.

```{r sample-gene-sets}
transcriptome_size = length(unique(codon_usage$Gene))
simulate_gene_set = function (size)
    sample.int(transcriptome_size, size)

n_simulations = 100
go_size = mean(sapply(go_terms, length))

transcriptome_samples = replicate(n_simulations, simulate_gene_set(transcriptome_size))
de_samples = replicate(n_simulations, simulate_gene_set(top_n_de))
go_samples = replicate(n_simulations, simulate_gene_set(go_size))
```

Calculate RCU for all samples in all libraries.

```{r rcu-simulations}
stopifnot(length(unique(codon_usage$Codon)) == 61)

get_gene_indices = function (i)
    (seq_len(61) - 1) * transcriptome_size + i

gene_sample_rcu = function (gene_set) {
    gene_indices = unlist(lapply(gene_set, get_gene_indices))
    codon_usage %>% group_by(DO) %>%
        slice(gene_indices) %>%
        group_by(DO, Codon) %>%
        summarize(CU = sum(CU, na.rm = TRUE)) %>%
        ungroup() %>%
        `class<-`(c('codon_usage$cu', class(.))) %>%
        cu$rcu(DO) %>%
        select(DO, Codon, RCU)
}

gene_sample_adaptation = function (contrasts, gene_set) {
    rcu = gene_sample_rcu(gene_set)
    do_contrasts(contrasts, correlate_contrast, cf, rcu, raa)
}

all_sample_adaptations = function (contrasts, samples) {
    # samples is a matrix genes x sample_ids
    apply(samples, 2, gene_sample_adaptation, contrasts = contrasts) %>%
        as.numeric()
}

matching_sample_adaptation = all_sample_adaptations(matching_contrasts,
                                                    transcriptome_samples)
mismatching_sample_adaptation = all_sample_adaptations(mismatching_contrasts,
                                                       transcriptome_samples)
# DE samples use matching contrasts as well; this works since we’re just
# interested in sample size, not actual DE gene sets.
de_sample_adaptation = all_sample_adaptations(matching_contrasts, de_samples)
go_sample_adaptation = all_sample_adaptations(matching_contrasts, go_samples)

all_sample_adaptation = list(Matching = matching_sample_adaptation,
                             Mismatching = mismatching_sample_adaptation,
                             DE = de_sample_adaptation,
                             GO = go_sample_adaptation) %>%
    {base$map(x ~ n -> data.frame(Correlation = x, Type = n), ., names(.))} %>%
    bind_rows()

ggplot(all_correlations, aes(factor(Type), Correlation)) +
    geom_boxplot() +
    geom_point(position = position_jitter(height = 0, width = 0.3),
               color = 'grey') +
    stat_summary(data = all_sample_adaptation, aes(factor(Type), Correlation),
                 fun.data = median_hilow,
                 color = '#8080FF', pch = 18, size = 0.75, geom = 'pointrange') +
    scale_x_discrete(name = '') +
    ggtitle('Codon–anticodon correlations between different conditions')
```
