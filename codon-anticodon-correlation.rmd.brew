```{r echo=FALSE, message=FALSE}
modules::import('./scripts/knit', attach = TRUE)
opts_chunk$set(fig.path = 'figure/codon-anticodon-<%= species %>-',
               cache = FALSE,
               dev = c('png', 'pdf'))

config = import('./config_<%= species %>')
```

## Load data

The aim of this analysis is to test whether the anticodon isoacceptor tRNA pool
is optimised to efficiently decode a condition specific set of codons, or
whether it is largely unchanging, and optimised to the overall codon usage.

First, we load the relevant data (gene expression counts, annotation and
experimental design).

```{r}
data = import('./data')
(trna_sf_counts = data$trna_sf_counts(config))
(mrna_sf_counts = data$mrna_sf_counts(config))
(trna_design = data$trna_design(config))
(mrna_design = data$mrna_design(config))
canonical_cds = data$canonical_cds(config)
```

## Codon usage and anticodon abundance

Calculate relative codon usage (RCU) and tRNA anticodon abundance. The RCU is
the proportion each codon contributes to the amino acid it codes for. To
calculate the RCU, we first calculate the codon usage (i.e. the count of each
codon) per gene. These counts are multiplied with the gene’s normalised
expression, and then summed over the transcriptome. Finally, each codon usage
is divided by the sum of the codon usage of its amino acid.

Calculate codon usage.

```{r codon-usage}
cu_ = import('codon_usage')
mrna_counts_and_cds = inner_join(mrna_sf_counts, canonical_cds, by = 'Gene')
raw_cu = inner_join(cu_$cu(canonical_cds), mrna_counts_and_cds, by = 'Gene')

cu = Map(DO ~ Celltype -> {
    raw_cu %>%
        mutate_(CU = bquote(CU * .(as.name(DO)) / nchar(Sequence))) %>%
        select(Gene, Codon, CU) %>%
        mutate(DO = DO, Celltype = Celltype)
}, mrna_design$DO, mrna_design$Celltype) %>%
    bind_rows()
```

Calculate the anticodon abundance (AA), the tRNA equivalent of the CU, i.e.
the abundance of each anticodon isoacceptor quantified by tRNA gene expression.

```{r aa}
aa = trna_sf_counts %>%
    rename(Type = AA) %>%
    tidyr::gather(DO, AA, starts_with('do')) %>%
    mutate(Codon = cu_$revcomp(Anticodon)) %>%
    group_by(DO, Type, Codon) %>%
    summarize(AA = sum(AA)) %>%
    ungroup() %>%
    inner_join(trna_design, by = 'DO')
```

## Codon usage and anticodon abundance adaptation

Calculate tRNA adaptation index weighted by gene expression in samples of (a)
matching, and (b) mismatching conditions. Compare the range of these
adaptations between (a) and (b) to test whether they are significantly
different. This being the case would reject the hypothesis of no adaptation of
the tRNA abundance to the transcriptome.

Define the contrasts we are looking at.

Since the tumour cell lines are relatively similar we explicitly exclude them
from the list of mismatching conditions.

```{r define-contrasts}
all_contrasts = expand.grid(Codon = unique(cu$Celltype),
                            Anti = unique(aa$Celltype),
                            stringsAsFactors = FALSE)
matching_contrasts = filter(all_contrasts, Codon == Anti)
mismatching_contrasts = filter(all_contrasts, Codon != Anti)
mismatching_contrasts = filter(mismatching_contrasts,
                               Codon == 'Liver-Adult' | Anti == 'Liver-Adult')
```

### tRNA adaptation index

Apart from simple correlation of matching codon/anticodon pairs, the tRNA
adaptation index (tAI; Dos Reis & al, 2004) is a measure of codon–anticodon
adaptation that accounts for wobble base pairing.

#### Matching and mismatching codon–anticodon pools

```{r gene-set-adaptation}
# Get all pairwise replicate library identifiers for a given contrast.
expand_contrast = function (contrast) {
    mrna_samples = filter(mrna_design, Celltype == contrast[1])$DO
    trna_samples = filter(trna_design, Celltype == contrast[2])$DO
    expand.grid(mrna_samples, trna_samples) %>% t() %>% as.data.frame()
}

# Get all pairwise replicate libraries for a set of contrasts.
expand_test_sets = function (contrasts) {
    contrasts = as.data.frame(t(contrasts))
    unname(bind_cols(lapply(contrasts, expand_contrast)))
}

replicate_test_set = function (cu, aa, mrna_lib, trna_lib, genes) {
    cu = filter(cu, Gene %in% genes)
    aa = filter(aa, DO == trna_lib)
    weights = cu %>%
        group_by(Gene) %>%
        summarize_(W = lazyeval::interp(~first(DO),
                                        DO = as.name(mrna_lib))) %>%
        {setNames(.$W, .$Gene)}
    list(cu = cu, aa = aa, weights = weights)
}

# Calculate adaptations for a list of tests sets, given an adaptation index.
adaptations = function (test_sets, index)
    parallel::mclapply(test_sets, index, mc.cores = parallel::detectCores()) %>%
    unlist() %>% unname()

# Generate an adaptation test set based on a given contrast, using all genes.
complete_test_sets = function (cu, aa, contrasts) {
    all_genes = unique(cu$Gene)
    test_set_ids = expand_test_sets(contrasts)
    lapply(test_set_ids, x -> replicate_test_set(cu, aa, x[1], x[2], all_genes))
}

matching_test_sets = function (cu, aa)
    complete_test_sets(cu, aa, matching_contrasts)

mismatching_test_sets = function (cu, aa)
    complete_test_sets(cu, aa, mismatching_contrasts)

# Calculate tAI on a single test set, given an adaptation index function.
tai = function (test_set) {
    all_tai = cu_$adaptation_tai(test_set$cu, test_set$aa, canonical_cds)
    weighted.mean(all_tai, test_set$weights[names(all_tai)])
}

matching_adaptations = adaptations(matching_test_sets(raw_cu, aa), tai)
mismatching_adaptations = adaptations(mismatching_test_sets(raw_cu, aa), tai)

all_adaptations = rbind(data.frame(tAI = matching_adaptations,
                                   Type = 'Matching'),
                        data.frame(tAI = mismatching_adaptations,
                                   Type = 'Mismatching'))

significance = wilcox.test(matching_adaptations,
                           mismatching_adaptations,
                           alternative = 'greater', conf.int = TRUE)

p = format.pval(significance$p.value)

ggplot(all_adaptations, aes(factor(Type), tAI)) +
    geom_boxplot() +
    geom_point(position = position_jitter(height = 0, width = 0.3),
               color = 'grey') +
    scale_x_discrete(name = bquote(paste('Sample types compared ',
                                         (p == .(p))))) +
    ggtitle('Codon–anticodon correlations between different conditions')
```

#### Codon–anticodon match in DE genes

Next, perform a similar analysis for differentially expressed genes only. First,
compute the sets of differentially expressed genes between healthy tissues and
cancer cell lines.

```{r de}
deseq = modules::import_package('DESeq2')
untidy = function (tidy_data, rownames = 1)
    `rownames<-`(as.data.frame(tidy_data[-rownames]), tidy_data[[rownames]])

deseq_test = function (data, col_data, contrast) {
    cols = col_data[[1]] %in% contrast
    col_data = col_data[cols, , drop = FALSE]
    data = data[, cols]
    design = eval(bquote(~ .(as.name(colnames(col_data)[1]))))
    dds = deseq$DESeqDataSetFromMatrix(data, col_data, design)
    deseq$DESeq(dds, quiet = TRUE)
}

mrna_counts = data$mrna_counts(config)
dds_data = untidy(select(mrna_counts, Gene, starts_with('do')))
dds_col_data = untidy(mrna_design)
dds_col_data = dds_col_data[colnames(dds_data), , drop = FALSE]
# Ensure Liver-Adult is condition A in the contrast
dds_col_data$Celltype = factor(dds_col_data$Celltype)
dds_col_data$Celltype = relevel(dds_col_data$Celltype, 'Liver-Adult')
de_contrasts = config$contrasts[grep('Liver-Adult', config$contrasts)]
dds = lapply(de_contrasts, deseq_test, data = dds_data, col_data = dds_col_data)
threshold = 0.001
de_genes = lapply(dds, dds -> subset(as.data.frame(deseq$results(dds)),
                                     ! is.na(padj) & padj < threshold) %>%
                            add_rownames('Gene'))
sapply(de_genes, nrow)
```

Save the differentially expressed genes in a table

```{r de-table, echo=FALSE}
write_de_result = contrast ~ dds -> {
    results = subset(as.data.frame(deseq$results(dds)), ! is.na(padj))
    io$write_table(results[order(results$padj), ],
                   file = sprintf('results/de-genes-%s.tsv', contrast),
                   row.names = TRUE)
}

mapply(write_de_result,
       base$map(x -> paste(tolower(x), collapse = '-'), de_contrasts),
       dds)
```

Secondly, re-calculate codon usage bias, but using only a subset of genes in
each condition. So instead of summing over all genes, we sum over the codon
usage of genes significantly upregulated in the respective condition, and we do
this separately for each contrast.

```{r de-cu}
top_n_de = 200
norm = import('norm')

gene_set_for_contrast = function (de_genes, cmp)
    filter(de_genes, cmp(log2FoldChange, 0)) %>%
    inner_join(canonical_cds, by = 'Gene') %>%
    mutate(BaseMeanTpm = norm$tpm(baseMean, nchar(Sequence))) %>%
    filter(BaseMeanTpm > quantile(BaseMeanTpm)[4]) %>%
    arrange(desc(abs(log2FoldChange))) %>%
    head(top_n_de) %>%
    .$Gene

set_a_for_contrast = function (de_genes)
    gene_set_for_contrast(de_genes, `<`)

set_b_for_contrast = function (de_genes)
    gene_set_for_contrast(de_genes, `>`)

de_test_sets = function (cu, aa, contrast, genes) {
    a = list(celltype = contrast[1], genes = set_a_for_contrast(genes))
    b = list(celltype = contrast[2], genes = set_b_for_contrast(genes))

    lapply(list(a, b), cond -> {
        # mRNA and tRNA come from same celltype
        contrasts = expand_contrast(rep(cond$celltype, 2))
        lapply(contrasts, x -> replicate_test_set(cu, aa, x[1], x[2], cond$genes))
    }) %>% unlist(recursive = FALSE)
}

all_de_test_sets = function (cu, aa)
    Map(c ~ g -> de_test_sets(cu, aa, c, g), de_contrasts, de_genes) %>%
    unlist(recursive  = FALSE)
```

Finally, calculate the adaptation between every sample’s DE gene RCU and the
sample’s matched anticodon abundance. The hypothesis of Gingold & al. would be
that these are significantly higher than mismatching codon–anticodon pool
correlations.

```{r de-codon-adaptation}
de_adaptations = adaptations(all_de_test_sets(raw_cu, aa), tai)

all_adaptations = rbind(all_adaptations,
                         data.frame(tAI = de_adaptations, Type = 'DE'))
all_adaptations$Type = factor(all_adaptations$Type,
                              c('Matching', 'Mismatching', 'DE'))

de_significance = wilcox.test(matching_adaptations,
                              de_adaptations, conf.int = TRUE,
                              alternative = 'less')

de_p = format.pval(de_significance$p.value)

ggplot(all_adaptations, aes(Type, tAI)) +
    geom_boxplot() +
    geom_point(position = position_jitter(height = 0, width = 0.3),
               color = 'grey') +
    scale_x_discrete(name = 'Sample types compared') +
    ggtitle('Codon–anticodon correlations between different conditions')
```

Testing for significant difference between the distribution of matching codon
supply and demand, and between the codon supply and demand just for DE genes
yields $p(\text{observation | DE = Matching}) = `r de_p`$.

#### Codon–anticodon match in genes of specific GO terms

We will also have a look at cell condition specific GO terms, as highlighted by
Gingold & al. First, load the GO term associations.

```{r go-associations, fig.width=5}
go_ids = c(GO0000087 = 'M phase of mitotic cell cycle',
           GO0007389 = 'Pattern specification process')

go_terms = sapply(names(go_ids),
                  function (id) readLines(sprintf('data/%s-%s.txt', id, config$species)))

go_test_sets = function (cu, aa, condition, genes) {
    # mRNA and tRNA come from same celltype
    contrasts = expand_contrast(rep(condition, 2))
    lapply(contrasts, x -> replicate_test_set(cu, aa, x[1], x[2], genes))
}

all_go_test_sets = function (cu, aa) {
    healthy = go_test_sets(cu, aa, 'Liver-Adult', go_terms$GO0007389)
    cancer_conditions = setdiff(unique(mrna_design$Celltype), 'Liver-Adult')
    cancer = lapply(cancer_conditions,
                    x -> go_test_sets(cu, aa, x, go_terms$GO0000087)) %>%
        unlist(recursive = FALSE)
    c(healthy, cancer)
}

go_adaptations = adaptations(all_go_test_sets(raw_cu, aa), tai)

all_adaptations = rbind(all_adaptations,
                        data.frame(tAI = go_adaptations, Type = 'GO'))

go_significance = wilcox.test(matching_adaptations,
                              go_adaptations, conf.int = TRUE,
                              alternative = 'less')
go_inverse_test = wilcox.test(matching_adaptations,
                              go_adaptations, conf.int = TRUE,
                              alternative = 'greater')

go_p = format.pval(go_significance$p.value)

ggplot(all_adaptations, aes(Type, tAI)) +
    geom_boxplot() +
    geom_point(position = position_jitter(height = 0, width = 0.3),
               color = 'grey') +
    scale_x_discrete(name = 'Sample types compared') +
    ggtitle('Codon–anticodon correlations between different conditions')
```

Testing for significant difference between the distribution of matching codon
supply and demand, and between the codon supply and demand just for gene sets
from condition-specific GO terms yields $p(\text{observation | GO = Matching})
= `r go_p`$, where $H_1$: “specific GO term gene set RCU correlates *better*
with matching RAA than whole-transcriptome codon usage”. For the inverted
hypothesis (*worse* match), we find $p = `r format.pval(go_inverse_test$p.value)`$.<!-- ` -->

## Account for sample size

The gene sets used in the four comparisons have different size, which implies
different magnitude of sampling bias. This in turn influences adaptation. To
account for this, perform simulations for each of the different sizes used. This
allows us to assess whether a given gene set’s adaptation is explained by its
gene set size.

“DE” uses sets of size `r top_n_de`. The GO term sets have sizes
`r paste(sapply(go_terms, length), collapse = ' and ')`, of which we’ll take the
mean to simulate gene sets.

```{r sample-gene-sets}
transcriptome = unique(raw_cu$Gene)

simulate_gene_set = function (size)
    sample(transcriptome, size)

n_simulations = 100
go_size = mean(sapply(go_terms, length))

de_samples = replicate(n_simulations, simulate_gene_set(top_n_de))
go_samples = replicate(n_simulations, simulate_gene_set(go_size))
```

Calculate tAI for all samples in all libraries.

```{r rcu-simulations}
sample_test_sets = go_test_sets

all_sample_test_sets = function (cu, aa, samples) {
    conditions = unique(mrna_design$Celltype)
    single_sample_test_sets = function (genes)
        lapply(conditions, x -> sample_test_sets(cu, aa, x, genes)) %>%
            unlist(recursive = FALSE)
    lapply(as.data.frame(samples), single_sample_test_sets) %>%
        unlist(recursive = FALSE)
}

# DE samples use matching contrasts as well; this works since we’re just
# interested in sample size, not actual DE gene sets.

de_sample_adaptations =
    adaptations(all_sample_test_sets(raw_cu, aa, de_samples), tai)
go_sample_adaptations =
    adaptations(all_sample_test_sets(raw_cu, aa, go_samples), tai)

all_sample_adaptation = list(DE = de_sample_adaptations,
                             GO = go_sample_adaptations) %>%
    {base$map(x ~ n -> data.frame(tAI = x, Type = n), ., names(.))} %>%
    bind_rows()

ggplot(all_adaptations, aes(factor(Type), tAI)) +
    geom_boxplot() +
    geom_point(position = position_jitter(height = 0, width = 0.3),
               color = 'grey') +
    stat_summary(data = all_sample_adaptation, aes(factor(Type), tAI),
                 fun.data = median_hilow,
                 color = '#8080FF', pch = 18, size = 0.75, geom = 'pointrange') +
    scale_x_discrete(name = '') +
    ggtitle('Codon–anticodon correlations between different conditions')
```
